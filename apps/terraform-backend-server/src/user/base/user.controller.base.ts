/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";
import { ProjectFindManyArgs } from "../../project/base/ProjectFindManyArgs";
import { Project } from "../../project/base/Project";
import { ProjectWhereUniqueInput } from "../../project/base/ProjectWhereUniqueInput";
import { EnvironmentFindManyArgs } from "../../environment/base/EnvironmentFindManyArgs";
import { Environment } from "../../environment/base/Environment";
import { EnvironmentWhereUniqueInput } from "../../environment/base/EnvironmentWhereUniqueInput";
import { SnapshotFindManyArgs } from "../../snapshot/base/SnapshotFindManyArgs";
import { Snapshot } from "../../snapshot/base/Snapshot";
import { SnapshotWhereUniqueInput } from "../../snapshot/base/SnapshotWhereUniqueInput";
import { StateFindManyArgs } from "../../state/base/StateFindManyArgs";
import { State } from "../../state/base/State";
import { StateWhereUniqueInput } from "../../state/base/StateWhereUniqueInput";

export class UserControllerBase {
  constructor(protected readonly service: UserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          username: true,
          email: true,
          roles: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          username: true,
          email: true,
          roles: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/projects")
  @ApiNestedQuery(ProjectFindManyArgs)
  async findProjects(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Project[]> {
    const query = plainToClass(ProjectFindManyArgs, request.query);
    const results = await this.service.findProjects(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,

        user: {
          select: {
            id: true,
          },
        },

        team: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/projects")
  async connectProjects(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/projects")
  async updateProjects(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/projects")
  async disconnectProjects(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/environments")
  @ApiNestedQuery(EnvironmentFindManyArgs)
  async findEnvironments(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Environment[]> {
    const query = plainToClass(EnvironmentFindManyArgs, request.query);
    const results = await this.service.findEnvironments(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,

        user: {
          select: {
            id: true,
          },
        },

        project: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/environments")
  async connectEnvironments(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EnvironmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      environments: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/environments")
  async updateEnvironments(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EnvironmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      environments: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/environments")
  async disconnectEnvironments(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EnvironmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      environments: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/snapshots")
  @ApiNestedQuery(SnapshotFindManyArgs)
  async findSnapshots(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Snapshot[]> {
    const query = plainToClass(SnapshotFindManyArgs, request.query);
    const results = await this.service.findSnapshots(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,

        environment: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/snapshots")
  async connectSnapshots(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SnapshotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      snapshots: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/snapshots")
  async updateSnapshots(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SnapshotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      snapshots: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/snapshots")
  async disconnectSnapshots(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SnapshotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      snapshots: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/states")
  @ApiNestedQuery(StateFindManyArgs)
  async findStates(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<State[]> {
    const query = plainToClass(StateFindManyArgs, request.query);
    const results = await this.service.findStates(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        version: true,
        stateData: true,

        environment: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        project: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/states")
  async connectStates(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: StateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      states: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/states")
  async updateStates(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: StateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      states: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/states")
  async disconnectStates(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: StateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      states: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
