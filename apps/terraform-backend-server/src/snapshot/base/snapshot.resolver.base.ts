/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Snapshot } from "./Snapshot";
import { SnapshotCountArgs } from "./SnapshotCountArgs";
import { SnapshotFindManyArgs } from "./SnapshotFindManyArgs";
import { SnapshotFindUniqueArgs } from "./SnapshotFindUniqueArgs";
import { CreateSnapshotArgs } from "./CreateSnapshotArgs";
import { UpdateSnapshotArgs } from "./UpdateSnapshotArgs";
import { DeleteSnapshotArgs } from "./DeleteSnapshotArgs";
import { Environment } from "../../environment/base/Environment";
import { User } from "../../user/base/User";
import { SnapshotService } from "../snapshot.service";
@graphql.Resolver(() => Snapshot)
export class SnapshotResolverBase {
  constructor(protected readonly service: SnapshotService) {}

  async _snapshotsMeta(
    @graphql.Args() args: SnapshotCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Snapshot])
  async snapshots(
    @graphql.Args() args: SnapshotFindManyArgs
  ): Promise<Snapshot[]> {
    return this.service.snapshots(args);
  }

  @graphql.Query(() => Snapshot, { nullable: true })
  async snapshot(
    @graphql.Args() args: SnapshotFindUniqueArgs
  ): Promise<Snapshot | null> {
    const result = await this.service.snapshot(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Snapshot)
  async createSnapshot(
    @graphql.Args() args: CreateSnapshotArgs
  ): Promise<Snapshot> {
    return await this.service.createSnapshot({
      ...args,
      data: {
        ...args.data,

        environment: args.data.environment
          ? {
              connect: args.data.environment,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Snapshot)
  async updateSnapshot(
    @graphql.Args() args: UpdateSnapshotArgs
  ): Promise<Snapshot | null> {
    try {
      return await this.service.updateSnapshot({
        ...args,
        data: {
          ...args.data,

          environment: args.data.environment
            ? {
                connect: args.data.environment,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Snapshot)
  async deleteSnapshot(
    @graphql.Args() args: DeleteSnapshotArgs
  ): Promise<Snapshot | null> {
    try {
      return await this.service.deleteSnapshot(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Environment, {
    nullable: true,
    name: "environment",
  })
  async getEnvironment(
    @graphql.Parent() parent: Snapshot
  ): Promise<Environment | null> {
    const result = await this.service.getEnvironment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Snapshot): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
