/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SnapshotService } from "../snapshot.service";
import { SnapshotCreateInput } from "./SnapshotCreateInput";
import { Snapshot } from "./Snapshot";
import { SnapshotFindManyArgs } from "./SnapshotFindManyArgs";
import { SnapshotWhereUniqueInput } from "./SnapshotWhereUniqueInput";
import { SnapshotUpdateInput } from "./SnapshotUpdateInput";

export class SnapshotControllerBase {
  constructor(protected readonly service: SnapshotService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Snapshot })
  async createSnapshot(
    @common.Body() data: SnapshotCreateInput
  ): Promise<Snapshot> {
    return await this.service.createSnapshot({
      data: {
        ...data,

        environment: data.environment
          ? {
              connect: data.environment,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,

        environment: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Snapshot] })
  @ApiNestedQuery(SnapshotFindManyArgs)
  async snapshots(@common.Req() request: Request): Promise<Snapshot[]> {
    const args = plainToClass(SnapshotFindManyArgs, request.query);
    return this.service.snapshots({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,

        environment: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Snapshot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async snapshot(
    @common.Param() params: SnapshotWhereUniqueInput
  ): Promise<Snapshot | null> {
    const result = await this.service.snapshot({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,

        environment: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Snapshot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSnapshot(
    @common.Param() params: SnapshotWhereUniqueInput,
    @common.Body() data: SnapshotUpdateInput
  ): Promise<Snapshot | null> {
    try {
      return await this.service.updateSnapshot({
        where: params,
        data: {
          ...data,

          environment: data.environment
            ? {
                connect: data.environment,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,

          environment: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Snapshot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSnapshot(
    @common.Param() params: SnapshotWhereUniqueInput
  ): Promise<Snapshot | null> {
    try {
      return await this.service.deleteSnapshot({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,

          environment: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
