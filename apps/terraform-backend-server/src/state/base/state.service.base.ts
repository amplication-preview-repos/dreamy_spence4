/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  State as PrismaState,
  Environment as PrismaEnvironment,
  User as PrismaUser,
  Project as PrismaProject,
} from "@prisma/client";

export class StateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.StateCountArgs, "select">): Promise<number> {
    return this.prisma.state.count(args);
  }

  async states(args: Prisma.StateFindManyArgs): Promise<PrismaState[]> {
    return this.prisma.state.findMany(args);
  }
  async state(args: Prisma.StateFindUniqueArgs): Promise<PrismaState | null> {
    return this.prisma.state.findUnique(args);
  }
  async createState(args: Prisma.StateCreateArgs): Promise<PrismaState> {
    return this.prisma.state.create(args);
  }
  async updateState(args: Prisma.StateUpdateArgs): Promise<PrismaState> {
    return this.prisma.state.update(args);
  }
  async deleteState(args: Prisma.StateDeleteArgs): Promise<PrismaState> {
    return this.prisma.state.delete(args);
  }

  async getEnvironment(parentId: string): Promise<PrismaEnvironment | null> {
    return this.prisma.state
      .findUnique({
        where: { id: parentId },
      })
      .environment();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.state
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getProject(parentId: string): Promise<PrismaProject | null> {
    return this.prisma.state
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
}
