/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EnvironmentService } from "../environment.service";
import { EnvironmentCreateInput } from "./EnvironmentCreateInput";
import { Environment } from "./Environment";
import { EnvironmentFindManyArgs } from "./EnvironmentFindManyArgs";
import { EnvironmentWhereUniqueInput } from "./EnvironmentWhereUniqueInput";
import { EnvironmentUpdateInput } from "./EnvironmentUpdateInput";
import { SnapshotFindManyArgs } from "../../snapshot/base/SnapshotFindManyArgs";
import { Snapshot } from "../../snapshot/base/Snapshot";
import { SnapshotWhereUniqueInput } from "../../snapshot/base/SnapshotWhereUniqueInput";
import { StateFindManyArgs } from "../../state/base/StateFindManyArgs";
import { State } from "../../state/base/State";
import { StateWhereUniqueInput } from "../../state/base/StateWhereUniqueInput";

export class EnvironmentControllerBase {
  constructor(protected readonly service: EnvironmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Environment })
  async createEnvironment(
    @common.Body() data: EnvironmentCreateInput
  ): Promise<Environment> {
    return await this.service.createEnvironment({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,

        project: data.project
          ? {
              connect: data.project,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,

        user: {
          select: {
            id: true,
          },
        },

        project: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Environment] })
  @ApiNestedQuery(EnvironmentFindManyArgs)
  async environments(@common.Req() request: Request): Promise<Environment[]> {
    const args = plainToClass(EnvironmentFindManyArgs, request.query);
    return this.service.environments({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,

        user: {
          select: {
            id: true,
          },
        },

        project: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Environment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async environment(
    @common.Param() params: EnvironmentWhereUniqueInput
  ): Promise<Environment | null> {
    const result = await this.service.environment({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,

        user: {
          select: {
            id: true,
          },
        },

        project: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Environment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEnvironment(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() data: EnvironmentUpdateInput
  ): Promise<Environment | null> {
    try {
      return await this.service.updateEnvironment({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,

          project: data.project
            ? {
                connect: data.project,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,

          user: {
            select: {
              id: true,
            },
          },

          project: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Environment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEnvironment(
    @common.Param() params: EnvironmentWhereUniqueInput
  ): Promise<Environment | null> {
    try {
      return await this.service.deleteEnvironment({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,

          user: {
            select: {
              id: true,
            },
          },

          project: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/snapshots")
  @ApiNestedQuery(SnapshotFindManyArgs)
  async findSnapshots(
    @common.Req() request: Request,
    @common.Param() params: EnvironmentWhereUniqueInput
  ): Promise<Snapshot[]> {
    const query = plainToClass(SnapshotFindManyArgs, request.query);
    const results = await this.service.findSnapshots(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,

        environment: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/snapshots")
  async connectSnapshots(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: SnapshotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      snapshots: {
        connect: body,
      },
    };
    await this.service.updateEnvironment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/snapshots")
  async updateSnapshots(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: SnapshotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      snapshots: {
        set: body,
      },
    };
    await this.service.updateEnvironment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/snapshots")
  async disconnectSnapshots(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: SnapshotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      snapshots: {
        disconnect: body,
      },
    };
    await this.service.updateEnvironment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/states")
  @ApiNestedQuery(StateFindManyArgs)
  async findStates(
    @common.Req() request: Request,
    @common.Param() params: EnvironmentWhereUniqueInput
  ): Promise<State[]> {
    const query = plainToClass(StateFindManyArgs, request.query);
    const results = await this.service.findStates(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        version: true,
        stateData: true,

        environment: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        project: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/states")
  async connectStates(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: StateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      states: {
        connect: body,
      },
    };
    await this.service.updateEnvironment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/states")
  async updateStates(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: StateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      states: {
        set: body,
      },
    };
    await this.service.updateEnvironment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/states")
  async disconnectStates(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: StateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      states: {
        disconnect: body,
      },
    };
    await this.service.updateEnvironment({
      where: params,
      data,
      select: { id: true },
    });
  }
}
